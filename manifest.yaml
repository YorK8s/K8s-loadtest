apiVersion: batch/v1
kind: Job
metadata:
  name: cluster-validation
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      # ---------------------------
      # FIO storage IOPS test
      # ---------------------------
      - name: fio
        image: nixery.dev/shell/fio
        command:
          - "sh"
          - "-c"
          - |
            echo "===> Running FIO write test..."
            fio --name=randwrite --rw=randwrite --bs=4k --size=1G --numjobs=4 \
                --iodepth=4 --runtime=30 --time_based --group_reporting \
                --direct=1 --filename=/data/testfile
            echo "===> Running FIO read test..."
            fio --name=randread --rw=randread --bs=4k --size=1G --numjobs=4 \
                --iodepth=4 --runtime=30 --time_based --group_reporting \
                --direct=1 --filename=/data/testfile
        volumeMounts:
          - name: test-volume
            mountPath: /data

      # ---------------------------
      # K6 HTTP & CPU test
      # ---------------------------
      - name: k6
        image: grafana/k6:latest
        command: ["sh", "-c", "k6 run /scripts/load-test.js"]
        volumeMounts:
          - name: k6-script
            mountPath: /scripts

      volumes:
        - name: test-volume
          persistentVolumeClaim:
            claimName: iops-test-pvc
        - name: k6-script
          configMap:
            name: k6-test-script
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: iops-test-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-test-script
data:
  load-test.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';

    scenarios: {
        high_load: {
            executor: 'constant-arrival-rate',
            rate: 2500, // 2500 requests per second
            timeUnit: '1s',
            duration: '1m',
            preAllocatedVUs: 100, // pre-spawned VUs
            maxVUs: 20000, // cap for autoscaling VUs
        },
    },

    export default function () {
      // Simple HTTP + CPU test
      const url = 'http://$IP/'; // your service endpoint
      const res = http.get(url);
      check(res, { 'status is 200': (r) => r.status === 200 });
      // light CPU work to simulate processing
      for (let i = 0; i < 1e6; i++) Math.sqrt(i);
      sleep(0.2);
    }
